name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and run tests
      run: |
        docker-compose build
        docker-compose up -d todo-api
        # Wait for services to be ready
        sleep 15
        # Run the test script directly since it has all our test cases
        docker-compose run --rm test python test_api_with_keploy.py
        
    - name: Run Keploy Test Suite
      if: env.KEPLOY_API_KEY != ''
      env:
        KEPLOY_API_KEY: ${{ secrets.KEPLOY_API_KEY }}
      run: |
        if [ ! -z "$KEPLOY_API_KEY" ]; then
          docker-compose run --rm test bash -c "
            export KEPLOY_API_KEY=$KEPLOY_API_KEY &&
            keploy test-suite --app=9d09b06a-70f5-443d-871e-47134856f411 --base-path https://github.com/HemrajShelke/todo-api.git --cloud
          "
        else
          echo "‚ö†Ô∏è Skipping Keploy tests - API key not configured"
        fi
        
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-coverage
        path: |
          backend/test_results/
        retention-days: 30
        
    - name: Test summary
      run: |
        echo "üìä CI/CD Pipeline Summary:"
        echo "=========================="
        echo "‚úÖ Code checkout completed"
        echo "‚úÖ Docker environment setup"
        echo "‚úÖ Tests executed in containers"
        if [ ! -z "$KEPLOY_API_KEY" ]; then
          echo "‚úÖ Keploy API tests executed"
        else
          echo "‚ö†Ô∏è Keploy tests skipped - API key not configured"
        fi
        echo ""
        echo "üìà Artifacts uploaded for review"
        echo "üîó Check the artifacts tab for detailed results"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build production image
      run: docker build -t todo-api:prod .
      
    - name: Deploy summary
      run: |
        echo "üöÄ Deployment Summary:"
        echo "====================="
        echo "‚úÖ All tests passed"
        echo "‚úÖ Production image built"
        echo ""
        echo "üìã Next steps:"
        echo "- Push image to container registry"
        echo "- Deploy to staging/production"
        echo "- Run health checks"
        echo "- Monitor deployment"