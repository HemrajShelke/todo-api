name: API Testing with Keploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  FLASK_ENV: testing
  FLASK_APP: backend/app.py
  PORT: 5000

jobs:
  api-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov requests

    - name: Start Flask server
      run: |
        # Ensure instance directory exists
        mkdir -p backend/instance
        
        # Start Flask server in background
        cd backend
        python app.py &
        echo $! > flask.pid
        
        # Wait for server to be ready
        echo "Waiting for Flask server to be ready..."
        for i in {1..30}; do
          if curl -s http://localhost:$PORT/health > /dev/null; then
            echo "Flask server is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Flask server failed to start"
            cat flask.pid | xargs kill -9
            exit 1
          fi
          sleep 1
        done

    - name: Run API Tests
      run: |
        python test_api_with_keploy.py || true  # Continue even if some tests fail

    - name: Run Unit Tests with Coverage
      run: |
        cd backend
        pytest tests/ --cov=. --cov-report=html --cov-report=xml

    - name: Stop Flask server
      if: always()
      run: |
        if [ -f backend/flask.pid ]; then
          cat backend/flask.pid | xargs kill -9 || true
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          backend/htmlcov/
          backend/coverage.xml
          keploy-logs.txt
        retention-days: 7
        if-no-files-found: warn

    - name: Generate test summary
      if: always()
      run: |
        echo "## API Test Results ðŸ“Š" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Keploy Test Summary" >> $GITHUB_STEP_SUMMARY
        if [ -f "keploy-logs.txt" ]; then
          cat keploy-logs.txt | grep -E "INFO: Total tests|SUCCESS: Passed|ERROR: Failed" >> $GITHUB_STEP_SUMMARY || true
        else
          echo "No Keploy logs found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Report" >> $GITHUB_STEP_SUMMARY
        if [ -f "backend/coverage.xml" ]; then
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat backend/coverage.xml | grep -E "line-rate|branch-rate" | head -1 >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "No coverage report found" >> $GITHUB_STEP_SUMMARY
        fi
